/*
 * requestGenerator.h
 *
 *  Created on: 01 Nov,2018
 *      Author: antec
 */

#ifndef REQUESTGENERATOR_H_
#define REQUESTGENERATOR_H_

#include <iostream>
#include <iomanip>
#include <fstream>
#include "constants.h"
using namespace std;

//generates between 100 and 150 client requests
class requestGenerator
{
public:
	//requestGenerator( int sampleSize) {sampleSize = 100;};
	void generateData();
	void const displayData();

private:
	static const int sampleSize = 100;
	ofstream Out;

	int clientHotel[sampleSize];
	int clientBudget[sampleSize];
	int clientEvents[sampleSize];


};

//generates the client data and stores into arrays
void requestGenerator::generateData()
{
     srand(time(0));

     for (int i = 0; i <  sampleSize; i++)
     {
          clientHotel[i] =  3 + (rand() % (5 - 3 + 1) );
     }


     for (int j = 0; j < sampleSize; j++)
     {
          clientBudget[j] = 3000 + (rand() % (10000 - 3000 + 1));
     }

     //add event -1 for end
     for (int k = 0; k < sampleSize; k++)
     {
    	  for ( int l = 0; l <  (MAXEVENTS + rand() % (MAXEVENTS - 1 + 1)) ; l++)
    	  {

    		  clientEvents[l] =  rand() % 15 + 0;
    	  }

     }
}

//displays the data generated by the random generator (test)
void const requestGenerator::displayData()
{
	int i= 0;
	Out.open( "ClientRequests.txt");

	     if (Out. fail() )
	     {
	    	 cout << "requests can be generated";
	     }


	Out << " clientNum" << "   " << "hotelType" << "    "<<  "Budget" <<  "   " <<  "events" << endl;
	while (!(i == 100) )
	{
		  Out << i + 1 << "  " << clientHotel[i] <<  "   " << clientBudget[i] << "   " << "{ ";


		 for ( int j = 0; j < MAXEVENTS ; j++)
			 {
		             Out  << clientEvents[j]  << ", ";
			 }

		 Out << " }" << endl;
		 i++;
	}
}



#endif /* REQUESTGENERATOR_H_ */
